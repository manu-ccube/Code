var self = module.exports;
const util = require('util');
const uuid = require('uuid');
const Redis = require("redis");
var config = require("./config.json");

//connect to redis
//
const redis = Redis.createClient({
    url: config.primaryNode,
    retry_strategy: function(options) {
        console.log(options)
        if (options.total_retry_time > 3000) {
            console.log('can`t connect to redis')
        }
        if (options.attempt > 5) {
            // End reconnecting with built in error
            return undefined;
        }
    }
});

var isConnected = false;

if (redis) {
    redis.on("connect", function () {
        console.log("connected");
        isConnected = true;    
    });
}

self.level = {
    ERROR: "ERROR",
    WARNING: "WARNING",
    INFO: "INFO",
    DEBUG: "DEBUG"
};

const log_types = { 
    types: 
    [
        { 
            level: 3,
            name: 'ERROR'
        },
        { 
            level: 2,
            name: 'WARNING'
        },
        { 
            level: 1,
            name: 'INFO'
        },
        { 
            level: 0,
            name: 'DEBUG'
        },
    ]
};

/**
 * logs the message if the requested log level is greater or equal to the current log level
 * @param level is the requested level for logging the message
 * @param arguments are the console.log() regular arguments
 *   
 */
self.log = function() {
    var args = Array.from(arguments);
    try {
        // First, we need to ge the logging level 
        // We don't need the level anymore, so we remove it from the argument list
        //
        var level = args[0];
        args.shift()

        var current_level = 0;
        var requested_level = 0;
        for (var type of log_types.types) {
            if (process.env.LOG_LEVEL === type.name) {
                current_level = type.level;
            }
            if (level === type.name) {
                requested_level = type.level;
            }
        }

        if (requested_level >= current_level) {
            // Obtain a UUID as the key for Redis
            //
            let msgID = uuid.v1();
            var message = args.length > 0 ? util.format.apply(util,args) : format;
            switch (level) {
                case self.level.DEBUG:
                    console.log('debug: ', message);
                    if (null != redis && isConnected)
                        redis.hset("logs_debug", msgID, message);
                    break;
                case self.level.INFO:
                    console.log('info: ', message);
                    if (null != redis && isConnected)
                        redis.hset("logs_info", msgID, message);
                    break;
                case self.level.WARNING:
                    console.log('warning: ', message);
                    if (null != redis && isConnected)
                        redis.hset("logs_warning", msgID, message);
                    break;
                case self.level.ERROR:
                    console.log('error: ', message);
                    if (null != redis && isConnected)
                        redis.hset("logs_error", msgID, message);
                    break;
                default:
                    console.log("no level");
            }
        }
    }
    catch(e) {
        console.log("Error while trying to store logs into Redis");
    }
}